@using Microsoft.EntityFrameworkCore;
@using StepChat.Contexts;
@using System.Security.Cryptography;
@using System.Text;

@model StepChat.Models.UsersModel
@inject MessengerDataDbContext _context

@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="~/css/main_style.css">

    <script defer src="~/lib/crypto-js/crypto-js.min.js"></script>
    <script defer src="~/lib/signalr/dist/browser/signalr.min.js"></script>
    <script defer src="~/lib/jquery/dist/jquery.min.js"></script>
    <script defer src="~/js/chat.js"></script>
    <script defer src="~/js/main_page_styles.js"></script>
    @*<script defer src="~/js/data_base.js"></script>*@

    <title>Step Chat</title>
</head>

@{

    int userId = this.Model.Id;
    List<List<ChatsModel>> chats = new();

    var chatsId = await _context!.ChatUsers
                    .Where(x => x.User1 == userId || x.User2 == userId)
                    .Select(e => e.ChatId)
                    .ToListAsync();

    @Html.HiddenFor(model => model.Id , new { Id = "userId" })
    ;

    foreach (var item in chatsId)
    {
        chats.Add(await _context.Chats.Where(x => x.ChatId == item).ToListAsync());
    }

}

@functions {
    string? GetEmail(int chatId, int userId)
    {
        var chat = _context!.ChatUsers.FirstOrDefault(x => x.User1 == userId && x.ChatId == chatId || x.User2 == userId && x.ChatId == chatId);

        //var chat = await _context.Chats.FirstOrDefaultAsync(x => x.ChatId == chatId);
        if (chat.User1 != userId)
        {
            var user = _context.Users.Find(chat.User1);
            return user.Email;
        }
        else
        {
            var user = _context.Users.Find(chat.User2);
            return user.Email;
        }
    }
    //public string Decrypt(string? encryptedText, string? key)
    //{
    //    RijndaelManaged? myRijndael = new RijndaelManaged();

    //    byte[] encryptedBytes = Convert.FromBase64String(encryptedText);
    //    var decryptor = myRijndael.CreateDecryptor(myRijndael.Key);
    //    byte[] originalBytes = decryptor.TransformFinalBlock(encryptedBytes, 0, encryptedBytes.Length);

    //    return Encoding.UTF8.GetString(originalBytes);
    //}

    //async Task<IResult?> getLastMessage(int chatId)
    //{
    //    string? text = _context.Messages
    //                   .OrderBy(e => e.Id)
    //                   .Where(e => e.ChatId == chatId)
    //                   .Select(e => e.Text)
    //                   .LastOrDefault();
    //    string? key = _context.Keys
    //                    .Where(e => e.ChatId == chatId)
    //                    .Select(e => e.Key)
    //                    .FirstOrDefault();

    //    //string? text = _context.Messages.OrderBy(x => x.Id).LastOrDefault(x => x.ChatId == chatId).Text;
    //    if (!String.IsNullOrEmpty(text))
    //    {
    //        Decrypt(text, key);
    //        var response = new
    //        {
    //            message = text,
    //            privateKey = key
    //        };
    //        return Results.Json(response);
    //    }
    //    else
    //        return null;
    //}
}


<body>
    <div class="container">
        <div class="search-box" id="search-box">
            <div class="header">
                @*<div class="burger-menu">
                    <button type="button" class="burger-menu-btn" onclick="burger_menu()">
                        <img src="/icons/menu-2.svg">
                    </button>
                </div>*@
                <div class="search-chat">
                    <input type="text" placeholder="Search">
                </div>
                <div class="new-chat" id="new-chat">
                    <button type="button" class="new-chat-btn" onclick="new_chat()">
                        <img src="/icons/messages.svg">
                    </button>
                </div>
            </div>
            <div class="chat-list">
                @foreach (var item in chats)
                {
                    foreach (var item2 in item)
                    {
                        <div id="user-cl" class="block" data-email=@GetEmail(@item2.ChatId, @userId) data-chatId=@item2.ChatId>
                            <div class="image-box">
                                <div class="image-padding">
                                    <img class="image" src="data:image;base64,@System.Convert.ToBase64String(_context.Images.FirstOrDefault(x => x.ImageId == item2.ImageId).Image)">
                                </div>
                            </div>
                            <div id="user-cl" class="details">
                                <div class="head-list">
                                    <h4>@item2.Name</h4>
                                    <p class="time">@item2.Time!.Value.ToString(@"hh\:mm")</p>
                                </div>
                                <div id="user-cl" class="message-container">
                                    <div class="message">
                                        <p></p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>

            <div class="settings-admin">
                <div class="admin-logos">
                    <div class="admin-panel">
                        <button class="admin-panel-btn" onclick="admin_panel()">
                            <img src="/icons/tool.svg">
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <div id="start-box" class="start-box">
            <div class="start-box-container">
                <img class="step-icon" src="~/icons/step_logo.svg" width="300" height="310">
                <br />
                <label style="text-align: center; color: #FFFFFF; font-size: 23px;">Step IT Local Chat</label>
                <br />
                <label style="color: #c1c1c1; font-size: 16px;">Chat with your teachers and friends everywhere</label>
            </div>
        </div>

        <div id="chat-box" class="chat-box">
            <!-- <img class="step-icon" src="logos.svg" width="300" height="310"> -->
            <div id="convo" class="convo">
                <div class="convo-head">
                    <div class="convo-user">
                        <div class="image-box">
                            <div class="image-padding">
                                <img class="image" src="/images/blank-profile-picture.png">
                            </div>
                        </div>
                        <h4>Орхан</h4>
                    </div>
                    <div class="convo-search-input" id="convo-search-input">
                        <input type="text" placeholder="Search">
                        <button type="button" class="search-close" onclick="search_close()">
                            <img src="/icons/x.svg">
                        </button>
                    </div>
                    <div class="convo-search" id="convo-search">
                        <button class="search-btn" onclick="search_input()">
                            <img src="/icons/search.svg">
                        </button>
                    </div>
                </div>
                <div class="convo-main">
                    <div id="messageList" class="chatting">
                        <div class="chat-message-container-your">
                            <div class="chat-message-your">
                                <div class="chatting-your-message-text">
                                    Готов
                                </div>
                                <span class="chat-your-message-time">12:15</span>
                                <div class="message-kr">
                                    <svg viewBox="0 0.65 8 13" height="30" width="30" preserveAspectRatio="xMidYMid meet" class="" version="1.1" x="0px" y="0px" enable-background="new 0 0 8 13" xml:space="preserve">
                                    <path fill="#00a884" d="M5.188,1H0v11.193l6.467-8.625 C7.526,2.156,6.958,1,5.188,1z"></path>
                  </svg>
                                </div>
                            </div>
                        </div>

                        <div class="chat-message-container-frnd">
                            <div class="chat-message-frnd">
                                <div class="frnd-message-kr">
                                    <svg viewBox="0 0.3 8 13" height="25" width="25" preserveAspectRatio="xMidYMid meet" class="" version="1.1" x="0px" y="0px" xml:space="preserve">
                                    <path fill="#3b4a54" d="M1.533,3.568L8,12.193V1H2.812 C1.042,1,0.474,2.156,1.533,3.568z"></path>
                  </svg>
                                </div>
                                <div class="chatting-frnd-message-text">
                                    Где дизайн?
                                </div>
                                <span class="chat-frnd-message-time">12:15</span>
                            </div>
                        </div>

                    </div>
                </div>
                <div class="convo-input">
                    <div class="paper-clip">
                        <img src="/icons/circle-plus.svg">
                    </div>
                    <div class="chat-input">
                        <input id="message" type="Text" placeholder="Type...">
                    </div>
                    <div class="smile">
                        <img src="/icons/mood-smile.svg">
                    </div>
                    <div id="sendBtn" class="send">
                        <img src="/icons/arrow-forward-up.svg">
                    </div>
                </div>
            </div>
        </div>

        <div class="new-chat-popup" id="new-chat-popup">
            <form class="new-chat-popup-container">
                <div class="search-new-chat">
                    <input type="text" placeholder="Search">
                </div>
                <div class="select-chat-user">
                    @foreach (var item in _context.Users)
                    {
                        <div class="new-chat-user" data-email=@item.Email>
                            <div class="image-box">
                                <div class="image-padding">
                                    <img class="image" src="data:image;base64,@System.Convert.ToBase64String(_context.Images.FirstOrDefault(x => x.ImageId == item.ImageId).Image)">
                                </div>
                            </div>
                            <h4>@item.FullName</h4>
                        </div>
                    }
                </div>
                <div class="new-chat-close-btn">
                    <button type="button" class="new-chat-close" onclick="new_chat_close()">
                        <img src="/icons/x.svg">
                    </button>
                </div>
            </form>
        </div>
@*
        <div class="new-chat-popup" id="new-chat-popup">
            <form class="new-chat-popup-container">
                <div class="search-new-chat">
                    <input type="text" placeholder="Search">
                </div>
                <div class="select-chat-user">
                    @foreach (var item in _context.Users)
                    {
                        <div class="new-chat-user" data-email=@item.Email>
                            <div class="image-box">
                                <div class="image-padding">
                                    <img class="image" src="data:image;base64,@System.Convert.ToBase64String(_context.Images.FirstOrDefault(x => x.ImageId == item.ImageId).Image)">
                                </div>
                            </div>
                            <h4>@item.FullName</h4>
                        </div>
                    }
                </div>
                <div class="new-chat-close-btn">
                    <button type="button" class="new-chat-close" onclick="new_chat_close()">
                        <img src="/icons/x.svg">
                    </button>
                </div>
            </form>
        </div>*@

        <div class="admin-popup" id="admin-popup">
            <form class="admin-container">
                <div class="group-buttons" id="group-buttons">
                    <button class="group-create-btn" type="button" onclick="group_create()">
                        <img src="/icons/users.svg">
                    </button>
                    <button class="user-add-btn" type="button" onclick="group_create()">
                        <img src="/icons/user-plus.svg">
                    </button>
                    <button class="user-delete-btn" type="button" onclick="group_create()">
                        <img src="/icons/user-minus.svg">
                    </button>
                </div>
                <div class="select-user" id="select-user">
                    <div class="select-group-user">
                        <div class="group-user">
                            <div class="image-box">
                                <div class="image-padding">
                                    <img class="image" src="/images/blank-profile-picture.png">
                                </div>
                            </div>
                            <h4>Орхан</h4>
                        </div>
                        <div class="select-user-cb">
                            <input type="checkbox">
                        </div>
                    </div>
                </div>
                <div class="group-create-submit" id="group-create-submit">
                    <button class="group-create-submit-btn" type="submit">
                        <p>Create Group</p>
                    </button>
                </div>
                <div class="admin-close-btn">
                    <button type="button" class="admin-close" onclick="admin_close()">
                        <img src="/icons/x.svg">
                    </button>
                </div>
            </form>
        </div>
    </div>
</body>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
</html>

